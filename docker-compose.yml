services:
  api:
    build: ./api  # Build the Node.js API service from the Dockerfile in the 'api' directory
    container_name: node_api  # Name the container 'node_api'
    ports:
      - "3000:3000"  # Map port 3000 on the host to port 3000 in the container
    depends_on:
      - db  # Ensure the 'db' service starts before this service
    environment:
      DB_HOST: db  # Set the database host to the name of the 'db' service
      DB_USER: admin  # Set the database username
      DB_PASSWORD: admin  # Set the database password
      DB_NAME: Test  # Set the name of the database to connect to
    networks:
      - app-network  # Connect this service to the 'app-network'
    volumes:
      - ./api:/usr/src/app  # Mount the local 'api' directory to the container's '/usr/src/app'
    command: npm start  # Command to start the Node.js application

  front:
    build: ./front  # Build the Angular frontend service from the Dockerfile in the 'front' directory
    container_name: angular_frontend  # Name the container 'angular_frontend'
    ports:
      - "4200:80"  # Map port 4200 on the host to port 80 in the container (Nginx)
    depends_on:
      - api  # Ensure the 'api' service starts before this service
    networks:
      - app-network  # Connect this service to the 'app-network'
    volumes:
      - ./front/app/dist/prueba-tecnica:/usr/share/nginx/html  # Mount the built Angular files to Nginx's HTML directory
      - ./front/nginx.conf:/etc/nginx/conf.d/default.conf  # Mount the custom Nginx configuration

  db:
    build: ./db  # Build the MySQL database service from the Dockerfile in the 'db' directory
    container_name: mysql_db  # Name the container 'mysql_db'
    environment:
      MYSQL_ROOT_PASSWORD: root  # Set the MySQL root password
      MYSQL_DATABASE: Test  # Create the database named 'Test'
      MYSQL_USER: admin  # Create a new user with the name 'admin'
      MYSQL_PASSWORD: admin  # Set the password for the new user
    volumes:
      - ./db/data:/var/lib/mysql  # Persist MySQL data to the local 'db/data' directory
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql  # Copy the initialization SQL script
    ports:
      - "3306:3306"  # Map port 3306 on the host to port 3306 in the container
    networks:
      - app-network  # Connect this service to the 'app-network'

networks:
  app-network:
    driver: bridge  # Use the default bridge network driver for the application
